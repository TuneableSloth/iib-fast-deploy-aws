AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a deployment of IBM Integration Bus version 10.0.0.10 on AWS EC2, with EFS,
  within an existing VPC and Bastion server environment. The IBM Integration Bus solution is configured
  to use an EFS for persistant storage of the Integration Node and Queue Manager. **WARNING** This template creates EC2
  instances and related resources. You will be billed for the AWS resources used if you create
  a stack from this template. IBM Integration Bus is licensed seperatley, please review the terms and conditions
  here (www.my-license.com)
  for further details. (qs-1nhqnkuii)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Software License Agreement
      Parameters:
      - LicenseAgreement
    - Label:
        default: Network Configuration
      Parameters:
      - VPCID
      - PrivateSubnet1ID
      - PrivateSubnet2ID
      - PublicSubnet1ID
      - PublicSubnet2ID
      - AdminConsoleAccessCIDR
      - ClientAppAccessCIDR
    - Label:
        default: Bastion Configuration
      Parameters:
      - KeyPairName
      - BastionSecurityGroupID
    - Label:
        default: IBM Integration Bus Instance Configuration
      Parameters:
      - InstanceName
      - InstanceOwner
      - InstanceType
      - IntegrationNodeName
      - IntegrationServerName
      - IIBWebUIUsername
      - IIBWebUIPassword
      - IIBAdminPassword
    - Label:
        default: Integration Node IBM MQ Queue Manager Configuration
      Parameters:
      - MQConsoleUsername
      - MQConsolePassword
      - MQAdminPassword
      - MQAppPassword
    ParameterLabels:
      AdminConsoleAccessCIDR:
        default: Allowed Admin Web Console External Access CIDR
      BastionSecurityGroupID:
        default: Bastion Security Group ID
      ClientAppAccessCIDR:
        default: Allowed Client Application External Access CIDR
      InstanceName:
        default: Instance Name Tag
      InstanceType:
        default:  Instance type
      MQConsoleUsername:
        default: Web Console Username
      MQConsolePassword:
        default: Web Console Password
      MQAdminPassword:
        default: Admin User Password
      MQAppPassword:
        default: Application User Password
      IntegrationNodeName:
        default: Integration Node Name
      IntegrationServerName:
        default: Integration Server Name
      KeyPairName:
        default: SSH Key Name
      LicenseAgreement:
        default: License Agreement
      IIBWebUIUsername:
        default: Web User Interface Username
      IIBWebUIPassword:
        default: Web User Interface Password
      IIBAdminPassword:
        default: Admin User Password
      InstanceOwner:
        default: Instance Owner
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      IntegrationNodeName:
        default: Integration Node Name
      IntegrationServerName:
        default: Integration Server Name
      VPCID:
        default: VPC ID
Parameters:
  AdminConsoleAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The IP address range allowed to access the IBM Integration Bus Web User Interface via 
      the ELB. We recommend that you set this value to a trusted IP range (0.0.0.0/0 is no restriction).
    Type: String
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g.
      sg-7f16e910).
    Type: AWS::EC2::SecurityGroup::Id
  ClientAppAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to allow access for IBM Integration Bus Client
      Applications. We recommend that you set this value to a trusted IP range.
    Type: String
  InstanceType:
    Description: EC2 instance type for the IBM Integration Bus server .
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceName:
    Description: Value for the name tag of the IBM Integration Bus instance that is deployed to EC2.
    Type: String
    Default: iib_server
  MQConsoleUsername:
    Description: Admin username used for accessing Web Console and REST Api.
    Default: mqconsoleadmin
    Type: String
  MQConsolePassword:
    Description: Admin password to access the MQ Web Console (Min. Length of 8 Characters, Max Length of 12 Characters).
    Type: String
    MinLength: 8
    MaxLength: 12
    NoEcho: true
  MQAdminPassword:
    Description: Password for predefined mqadmin user used to administer MQ (Min.
      Length of 8 Characters, Max Length of 12 Characters).
    Type: String
    MinLength: 8
    MaxLength: 12
    NoEcho: true
  MQAppPassword:
    Description: Password for predefined mqapp user used by applications to securely
      connect to MQ (Min. Length of 8 Characters, Max Length of 12 Characters).
    Type: String
    MinLength: 8
    MaxLength: 12
    NoEcho: true
  IntegrationNodeName:
    Description: Name of the Integration Node.
    Type: String
    Default: IIBNode
    ConstraintDescription: must be a valid Integration Node name.
  IntegrationServerName:
    Description: Name of the Integration Server.
    Type: String
    Default: IIBServ1
    ConstraintDescription: must be a valid Integration Server name.
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  LicenseAgreement:
    Description: I have read and agree to the license terms for IBM Integration Bus (www.my-license.com).
    Type: String
    Default: '-'
    AllowedValues:
    - I agree
    - '-'
    ConstraintDescription: must answer 'I agree'
  IIBWebUIUsername:
    Description: Admin username used for accessing the IBM Integration Bus web user interface.
    Default: iibwebuiadmin
    Type: String
  IIBWebUIPassword:
    Description: Admin Password to access the IBM Integration Bus web user interface (Min. Length of 8 Characters, Max Length of 12 Characters).
    Type: String
    MinLength: 8
    MaxLength: 12
    NoEcho: true
  IIBAdminPassword:
    Description: Password for predefined iib user used to administer IBM Integration Bus (Min.
      Length of 8 Characters, Max Length of 12 Characters).
    Type: String
    MinLength: 8
    MaxLength: 12
    NoEcho: true
  InstanceOwner:
    Description: Value for the owner tag of the IBM Integration Bus instance that is deployed to EC2.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the IBM Integration Bus instances
      (e.g. subnet-a0246dcd).
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the IBM Integration Bus instances
      (e.g. subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g. subnet-9bc642ac).
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g. subnet-e3246d8e).
    Type: AWS::EC2::Subnet::Id
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
Rules:
  LicenseAgreementRule:
    Assertions:
    - Assert:
        Fn::Contains:
        - - I agree
        - Ref: LicenseAgreement
      AssertDescription: User must agree to the terms of the license agreement.
  EFSSupportedRegionRule:
    Assertions:
    - Assert:
        Fn::Contains:
        - - us-east-1
          - us-east-2
          - us-west-2
          - eu-west-1
          - ap-southeast-2
        - !Ref AWS::Region
      AssertDescription: This Quick Start utilizes Amazon EFS which is only available
        in the US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland)
        and Asia Pacific (Sydney) regions. Please launch the stack in one of these
        regions
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
      AssertDescription: All subnets must in the VPC
Mappings:
  AWSAMIRegionMap:
    AMI:
      IIB10US1604: IIB_10_Ubuntu_1604
    ap-southeast-2:
      IIB10US1604: ami-1e67907c
    eu-west-1:
      IIB10US1604: ami-9614aeef
    us-east-1:
      IIB10US1604: ami-b8472fc2
    us-east-2:
      IIB10US1604: ami-f185ac94
    us-west-2:
      IIB10US1604: ami-eb972093
Conditions:
  GovCloudCondition:
    Fn::Equals:
    - Ref: AWS::Region
    - us-gov-west-1
Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  InstanceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReportHealthPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: autoscaling:SetInstanceHealth
          Resource:
            Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroup}
      Roles:
      - !Ref InstanceRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole
  IIBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable SSH access via port 22, and access to 1414, 9443 for MQ and 4417, 7800 for IIB.
        via ELB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        SourceSecurityGroupId: !Ref BastionSecurityGroupID
      - IpProtocol: tcp
        FromPort: '1414'
        ToPort: '1414'
        SourceSecurityGroupId: !Ref IIBELBSecurityGroup
      - IpProtocol: tcp
        FromPort: '9443'
        ToPort: '9443'
        SourceSecurityGroupId: !Ref IIBELBSecurityGroup
      - IpProtocol: tcp
        FromPort: '4417'
        ToPort: '4417'
        SourceSecurityGroupId: !Ref IIBELBSecurityGroup
      - IpProtocol: tcp
        FromPort: '7800'
        ToPort: '7800'
        SourceSecurityGroupId: !Ref IIBELBSecurityGroup
  IIBELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable access via port 1414 and 9443 for MQ and 4417, 7800 for IIB via ELB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref ClientAppAccessCIDR
      - IpProtocol: tcp
        FromPort: '1414'
        ToPort: '1414'
        CidrIp: !Ref ClientAppAccessCIDR
      - IpProtocol: tcp
        FromPort: '9443'
        ToPort: '9443'
        CidrIp: !Ref AdminConsoleAccessCIDR
      - IpProtocol: tcp
        FromPort: '4417'
        ToPort: '4417'
        CidrIp: !Ref AdminConsoleAccessCIDR
      - IpProtocol: tcp
        FromPort: '7800'
        ToPort: '7800'
        CidrIp: !Ref ClientAppAccessCIDR
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !Ref IIBSecurityGroup
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallConfig:
          - Install
          - Configure
        Install:
          files:
            /usr/local/etc/mq-configure-script.sh:
              content:
                Fn::Sub: |
                  #!/bin/bash
                  QMGR_NAME=${IntegrationNodeName}_QM
                  MQ_FILE_SYSTEM=${FileSystem}
                  AWS_REGION=${AWS::Region}
                  AWS_STACK_NAME=${AWS::StackName}
                  MQ_CONSOLE_USER='${MQConsoleUsername}'
                  MQ_CONSOLE_PASSWORD='${MQConsolePassword}'
                  MQ_ADMIN_PASSWORD='${MQAdminPassword}'
                  MQ_APP_PASSWORD='${MQAppPassword}'
                  configure-mq-aws ${!QMGR_NAME} ${!MQ_FILE_SYSTEM} ${!AWS_REGION} ${!MQ_CONSOLE_USER} ${!MQ_CONSOLE_PASSWORD} ${!MQ_ADMIN_PASSWORD} ${!MQ_APP_PASSWORD}
              mode: '000700'
              owner: root
              group: root
            /usr/local/etc/iib-configure-script.sh:
              content:
                Fn::Sub: |
                  #!/bin/bash
                  IIB_NODE_NAME=${IntegrationNodeName}
                  IIB_INTEGRATION_SERVER_NAME=${IntegrationServerName}
                  QMGR_NAME=${IntegrationNodeName}_QM
                  IIB_FILE_SYSTEM=${FileSystem}
                  AWS_REGION=${AWS::Region}
                  AWS_STACK_NAME=${AWS::StackName}
                  IIB_WEBUI_USER='${IIBWebUIUsername}'
                  IIB_WEBUI_PASSWORD='${IIBWebUIPassword}'
                  IIB_ADMIN_PASSWORD='${IIBAdminPassword}'
                  #configure-iib-aws ${!IIB_NODE_NAME} ${!IIB_INTEGRATION_SERVER_NAME} ${!QMGR_NAME} ${!IIB_FILE_SYSTEM} ${!AWS_REGION} ${!IIB_ADMIN_PASSWORD} ${!IIB_WEBUI_USER} ${!IIB_WEBUI_PASSWORD}
              mode: '000700'
              owner: root
              group: root
        Configure:
          commands:
            01_RunMQConfig:
              command: /usr/local/etc/mq-configure-script.sh
              ignoreErrors: "true"
            02_RunIIBConfig:
              command: /usr/local/etc/iib-configure-script.sh
    Properties:
      AssociatePublicIpAddress: false
      ImageId:
        Fn::FindInMap:
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - IIB10US1604
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
      - !Ref IIBSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            /usr/local/bin/cfn-init --stack ${AWS::StackName} --resource LaunchConfiguration --configsets InstallConfig --region ${AWS::Region}
            # Signal the status from cfn-init
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MountTarget1
    - MountTarget2
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1ID
      - !Ref PrivateSubnet2ID
      LoadBalancerNames:
      - !Ref LoadBalancer
      HealthCheckType: ELB
      HealthCheckGracePeriod: 90
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
      - Key: Name
        Value: !Ref InstanceName
        PropagateAtLaunch: 'true'
      - Key: Owner
        Value: !Ref InstanceOwner
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
      - Key: Name
        Value: FileSystem
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet2ID
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      LoadBalancerName:
        Fn::Sub: iib-elb-${AWS::AccountId}
      Listeners:
      - InstancePort: '1414'
        InstanceProtocol: TCP
        LoadBalancerPort: '1414'
        Protocol: TCP
      - InstancePort: '9443'
        InstanceProtocol: TCP
        LoadBalancerPort: '9443'
        Protocol: TCP
      - InstancePort: '4417'
        InstanceProtocol: TCP
        LoadBalancerPort: '4417'
        Protocol: TCP
      - InstancePort: '7800'
        InstanceProtocol: TCP
        LoadBalancerPort: '7800'
        Protocol: TCP
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: TCP:1414
        Timeout: '5'
        UnhealthyThreshold: '2'
      SecurityGroups:
      - !Ref IIBELBSecurityGroup
      Subnets:
      - !Ref PublicSubnet1ID
      - !Ref PublicSubnet2ID
Outputs:
  IBMIntegrationBusWebUseInterfaceURL:
    Description: URL for Elastic Load Balancer to connect to the IBM Integration Bus Web UI.
    Value:
      Fn::Sub: https://${LoadBalancer.DNSName}:4417
  IBMIntegrationBusRESTAPIURL:
    Description: URL for Elastic Load Balancer to connect to the IBM Integration Bus REST API.
    Value:
      Fn::Sub: https://${LoadBalancer.DNSName}:4417/apiv1/properties
  URLtoanIBMIntegrationBusSimpleApplication:
    Description: URL for Elastic Load Balancer to test a simple application on IBM Integration Bus.
    Value:
      Fn::Sub: https://${LoadBalancer.DNSName}:7800/iibping
  IBMMQWebConsoleURL:
    Description: URL for Elastic Load Balancer to connect to the IBM MQ Web Console.
    Value:
      Fn::Sub: https://${LoadBalancer.DNSName}:9443/ibmmq/console/
  IBMMQRESTAPIURL:
    Description: URL for Elastic Load Balancer to connect to the IBM MQ REST API.
    Value:
      Fn::Sub: https://${LoadBalancer.DNSName}:9443/ibmmq/rest/v1/
  ReadMeInformation:
    Description: 'For more information and details visit:'
    Value: https://aws.amazon.com/quickstart/architecture/iib/
...
